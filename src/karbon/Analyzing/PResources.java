/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PResources.java
 *
 * Created on 26 Αυγ 2010, 12:23:44 μμ
 */

package karbon.Analyzing;

import KAnalyzer.API.TPresenter;
import KAnalyzer.Utils.ReportTools.ReportFormat;
import KAnalyzer.Utils.SummayCollector;

/**
 *
 * @author Γιάννης
 */
public class PResources extends TPresenter {

    /** Creates new form PResources */
    public PResources() {
        initComponents();
        gridFilesystem.Title = "Filesystem I/O Stats";
        gridMemory.Title = "Memry I/O Stats";
        gridSockets.Title = "Sockets I/O Stats";
        gridMisc.Title = "Misc I/O Stats";
        gridSummary.Title = "I/O Stats summary";
        gridFailures.Title = "I/O Failures summary";
        listUnhandled.Title = "Unhandled system calls for I/O Stats";

        Title = "I/O Stats";

        gridFilesystem.setColumnInfo(new Object[][] {
            { "PID / Process", String.class, 200 },
            { "Filename", String.class, 500 },
            { "Calls", Integer.class, 100 },
            { "Time (ms)", Double.class, 100 },
            { "Errors", Integer.class, 100 },
            { "Error Time (ms)", Double.class, 100 },
            { "Bytes written", Long.class, 100 },
            { "Bytes read", Long.class, 100 },
            { "Last error", String.class, 100 },
        });

        gridMisc.setColumnInfo(new Object[][] {
            { "PID / Process", String.class, 200 },
            { "Index", String.class, 500 },
            { "Calls", Integer.class, 100 },
            { "Time (ms)", Double.class, 100 },
            { "Errors", Integer.class, 100 },
            { "Error Time (ms)", Double.class, 100 },
            { "Bytes written", Long.class, 100 },
            { "Bytes read", Long.class, 100 },
            { "Last error", String.class, 100 },
        });

        gridSockets.setColumnInfo(new Object[][] {
            { "PID / Process", String.class, 200 },
            { "Local", String.class, 500 },
            { "Remote", String.class, 500 },
            { "Family", String.class, 100 },
            { "Type", String.class, 150 },
            { "Calls", Integer.class, 100 },
            { "Time (ms)", Double.class, 100 },
            { "Errors", Integer.class, 100 },
            { "Error Time (ms)", Double.class, 100 },
            { "Bytes sent", Long.class, 100 },
            { "Bytes received", Long.class, 100 },
            { "Last error", String.class, 100 },
        });
        
        gridSummary.setColumnInfo(new Object[][] {
            { "Group", String.class, 200 },
            { "What", String.class, 500 },
            { "Value", String.class, 100 },
        });

        gridFailures.setColumnInfo(new Object[][] {
            { "Short", String.class, 200 },
            { "Description", String.class, 500 },
            { "Hits", Integer.class, 100 },
            { "Total time (ms)", Double.class, 100 },
        });

    }

    public void storeSummary( SummayCollector summary ) {
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        gridSockets = new KAnalyzer.Utils.GridPresenter();
        gridFilesystem = new KAnalyzer.Utils.GridPresenter();
        gridMemory = new KAnalyzer.Utils.GridPresenterEx();
        gridMisc = new KAnalyzer.Utils.GridPresenterEx();
        gridFailures = new KAnalyzer.Utils.GridPresenterEx();
        listUnhandled = new KAnalyzer.Utils.ListPresenter();
        gridSummary = new KAnalyzer.Utils.GridPresenterEx();

        jTabbedPane1.addTab("Network Sockets I/O", gridSockets);
        jTabbedPane1.addTab("Filesystem I/O", gridFilesystem);
        jTabbedPane1.addTab("Memory I/O", gridMemory);
        jTabbedPane1.addTab("Misc I/O", gridMisc);
        jTabbedPane1.addTab("Failures", gridFailures);
        jTabbedPane1.addTab("Unhandled Calls", listUnhandled);
        jTabbedPane1.addTab("Summary", gridSummary);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void reset() {
        gridFilesystem.reset();
        gridMemory.reset();
        gridSockets.reset();
        gridSummary.reset();
        gridMisc.reset();
        gridFailures.reset();
        listUnhandled.reset();
    }

    @Override
    public String getReport(ReportFormat format) {
        String buffer = "";
        if ( gridFilesystem.includeToReport() ) buffer += gridFilesystem.getReport(format);
        if ( gridMemory.includeToReport() ) buffer += gridMemory.getReport(format);
        if ( gridSockets.includeToReport() ) buffer += gridSockets.getReport(format);
        if ( gridMisc.includeToReport() ) buffer += gridMisc.getReport(format);
        if ( gridFailures.includeToReport() ) buffer += gridFailures.getReport(format);
        if ( gridSummary.includeToReport() ) buffer += gridSummary.getReport(format);
        if ( listUnhandled.includeToReport() ) buffer += listUnhandled.getReport(format);
        return buffer;
    }

    @Override
    public boolean includeToReport() {
        return gridFilesystem.includeToReport() || gridMemory.includeToReport() ||
               gridSockets.includeToReport() || listUnhandled.includeToReport() ||
               gridMisc.includeToReport() || gridFailures.includeToReport() ||
               gridSummary.includeToReport();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public KAnalyzer.Utils.GridPresenterEx gridFailures;
    public KAnalyzer.Utils.GridPresenter gridFilesystem;
    public KAnalyzer.Utils.GridPresenterEx gridMemory;
    public KAnalyzer.Utils.GridPresenterEx gridMisc;
    public KAnalyzer.Utils.GridPresenter gridSockets;
    public KAnalyzer.Utils.GridPresenterEx gridSummary;
    private javax.swing.JTabbedPane jTabbedPane1;
    public KAnalyzer.Utils.ListPresenter listUnhandled;
    // End of variables declaration//GEN-END:variables

}
