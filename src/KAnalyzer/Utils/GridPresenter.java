/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GridPresenter.java
 *
 * Created on 20 Αυγ 2010, 5:39:54 μμ
 */

package KAnalyzer.Utils;

import javax.swing.table.DefaultTableModel;
import KAnalyzer.Utils.ReportTools.ReportFormat;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Ioannis Charalampidis <johnys2@gmail.com>
 */
public class GridPresenter extends KAnalyzer.API.TPresenter {

    DefaultTableModel tableModel;
    private Object[][] columnInfo;

    /** Creates new form GridPresenter */
    public GridPresenter() {
        initComponents();
        tableModel = new DefaultTableModel();
        jGridData.setModel(tableModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jGridData = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();

        jGridData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jGridData);

        jButton1.setText("Save to file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Include to report");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jToggleButton1)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReportTools.saveReportDialog(this);
}//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public javax.swing.JTable jGridData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void reset() {
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
    }

    /*
     * Set the column information as a double-vector format:
     * {
     *   { <String: Name>, <class: Data class>, <Integer: Width>
     * }
     */
    public void setColumnInfo(Object[][] Info) {
        // Create new
        for (int c = 0; c < Info.length; c++) {
            if (Info[c].length == 0) {
                Info[c] = new Object[]{ "", String.class, 400 };
            } else if (Info[c].length == 1) {
                Info[c] = new Object[]{ Info[c][0], String.class, 400 };
            } else if (Info[c].length == 2) {
                Info[c] = new Object[]{ Info[c][0], Info[c][1], 400 };
            }
            tableModel.addColumn((String)Info[c][0]);
        }
        columnInfo = Info;

    }

    public void addColumn(String Name) {
        tableModel.addColumn(Name);
    }

    public void addColumn(String Name, Integer Width) {
        tableModel.addColumn(Name);
        TableColumnModel model = jGridData.getColumnModel();
        int n = model.getColumnCount();
        for (int i = 0; i < n; i++) {
            if (i == n-1) {
                model.getColumn(i).setPreferredWidth(Width);
            }
        }
    }

    public void addRow(Object[] Data) {
        tableModel.addRow(Data);
    }

    private String padToLength(String src, Integer length) {
        return String.format("%1$-" + length + "s", src);
    }

    @Override
    public String getReport(ReportFormat format) {
        String buffer = "", cellStr = "";
        Integer cols = tableModel.getColumnCount();
        Integer rows = tableModel.getRowCount();
        Integer totalSize = 0;
        Integer[] colSizes = new Integer[] { };

        // Header and initializations
        if (format == ReportFormat.Text) {

            // Find out the maximum size of the contents per column
            colSizes = new Integer[cols];
            for (int x=0; x<cols; x++) {
                colSizes[x] = tableModel.getColumnName(x).length();
                for (int y=0; y<rows; y++) {
                    cellStr = tableModel.getValueAt(y, x).toString();
                    if (cellStr.length() > colSizes[x]) colSizes[x] = cellStr.length();
                }
                totalSize += colSizes[x]+1;
            }

            buffer += " ==[ " + Title + " ]==========================\n\n";
        } else if (format == ReportFormat.HTML) {
            buffer += "<h2>" + Title + "</h2>\n<table border=\"1\"><tr>\n";
        } else if (format == ReportFormat.CSV) {
            buffer += Title + "\n";
        } 

        // Column headers
        String colName, dataRow = "";
        dataRow = "";
        for (int i=0; i<cols; i++) {
            colName = tableModel.getColumnName(i);
            if (format == ReportFormat.Text) {
                dataRow += " "+padToLength(colName, colSizes[i]);
            } else if (format == ReportFormat.HTML) {
                dataRow += "   <th>"+colName+"</th>";
            } else if (format == ReportFormat.CSV) {
                if (!dataRow.equals("")) dataRow += ",";
                dataRow += colName;
            }
        }
        buffer += dataRow + "\n";
        
        // Finalize headers
        if (format == ReportFormat.HTML) {
            buffer += "</tr>\n";
        }

        // Content processing
        for (int r=0; r<rows; r++) {
            dataRow = "";

            // Initialize data row
            if (format == ReportFormat.Text) {
            } else if (format == ReportFormat.HTML) {
                dataRow += "<tr>\n";
            } else if (format == ReportFormat.CSV) {
            }

            // Create data row
            for (int c=0; c<cols; c++) {
                cellStr = tableModel.getValueAt(r, c).toString();
                if (format == ReportFormat.Text) {
                    dataRow += " "+padToLength(cellStr, colSizes[c]);
                } else if (format == ReportFormat.HTML) {
                    dataRow += "   <td>"+cellStr+"</td>";
                } else if (format == ReportFormat.CSV) {
                    if (!dataRow.equals("")) dataRow += ",";
                    dataRow += cellStr;
                }
            }

            // Finalize data row
            if (format == ReportFormat.Text) {
                dataRow += "\n";
            } else if (format == ReportFormat.HTML) {
                dataRow += "</tr>\n";
            } else if (format == ReportFormat.CSV) {
                dataRow += "\n";
            }

            // Insert data row
            buffer += dataRow;
        }

        // Footer
        if (format == ReportFormat.Text) {
            buffer += "\n";
        } else if (format == ReportFormat.HTML) {
            buffer += "</table>";
        } else if (format == ReportFormat.CSV) {
            buffer += "\n";
        }

        return buffer;
    }

    @Override
    public boolean includeToReport() {
        return jToggleButton1.isSelected();
    }

}
